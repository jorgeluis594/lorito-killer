// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id        String   @id @default(uuid())
  companyId String?
  company  Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name      String
  price     Decimal
  sku       String?
  stock     Int
  purchasePrice Decimal
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photos    Photo[]
  categories Category[]
  orderItems OrderItem[]
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  name      String
  key       String
  type      String
  size      Int
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model Category {
  id        String   @id @default(uuid())
  name      String
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ShiftStatus {
  OPEN
  CLOSED
}

model CashShift {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  companyId     String?
  company       Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  initialAmount Decimal
  finalAmount   Decimal?
  orders        Order[]
  payments      Payment[]
  status        ShiftStatus
  openedAt      DateTime
  closedAt      DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OrderItem {
  id           String   @id @default(uuid())
  quantity     Int
  total        Decimal
  productId    String
  orderId      String
  productPrice Decimal
  product      Product @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order {
  id        String    @id @default(uuid())
  cashShiftId String
  companyId  String?
  company    Company? @relation(fields: [companyId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  total     Decimal
  status    String
  cashShift CashShift @relation(fields: [cashShiftId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orderItems     OrderItem[]
}

model Company {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String
  address   String
  users     User[]
  products Product[]
  cashShifts CashShift[]
  orders Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  companyId String?
  company  Company?  @relation(fields: [companyId], references: [id])
  email     String   @unique
  password  String
  name      String?
  cashShifts CashShift[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  WALLET
}

model Payment {
  id        String   @id @default(uuid())
  cashShiftId String
  amount    Decimal
  orderId   String
  data      Json?
  method    PaymentMethod
  cashShift CashShift @relation(fields: [cashShiftId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
