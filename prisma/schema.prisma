// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UnitType {
  UNIT
  KG
}

model Product {
  id                         String          @id @default(uuid())
  companyId                  String?
  company                    Company?        @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name                       String
  price                      Decimal
  sku                        String?
  stock                      Decimal?
  unitType                   UnitType?
  purchasePrice              Decimal?
  targetMovementProductId    String?
  targetMovementProductStock Decimal?
  description                String
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt
  isPackage                  Boolean         @default(false)
  photos                     Photo[]
  childPackageItems          PackageItem[]   @relation("ChildProducts")
  parentPackageItems         PackageItem[]   @relation("ParentProducts")
  stockTransfers             StockTransfer[]
  categories                 Category[]
  orderItems                 OrderItem[]
}

model PackageItem {
  id              String   @id @default(uuid())
  quantity        Int
  childProductId  String
  parentProductId String
  childProduct    Product  @relation("ChildProducts", fields: [childProductId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  parentProduct   Product  @relation("ParentProducts", fields: [parentProductId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  name      String
  key       String
  type      String
  size      Int
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model Category {
  id        String    @id @default(uuid())
  companyId String?
  company   Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum StockTransferType {
  ORDER
  ADJUSTMENT
  PRODUCT_MOVEMENT
}

model StockTransfer {
  id        String            @id @default(uuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  productId String
  product   Product           @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String
  company   Company           @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type      StockTransferType
  data      Json
  value     Decimal
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum ShiftStatus {
  OPEN
  CLOSED
}

model Expense {
  id          String    @id @default(uuid())
  cashShiftId String
  cashShift   CashShift @relation(fields: [cashShiftId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amount      Decimal
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CashShift {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  companyId     String?
  company       Company?    @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  initialAmount Decimal
  finalAmount   Decimal?
  orders        Order[]
  payments      Payment[]
  status        ShiftStatus
  openedAt      DateTime
  closedAt      DateTime?
  expenses      Expense[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id           String   @id @default(uuid())
  quantity     Decimal
  total        Decimal
  productId    String
  orderId      String
  productPrice Decimal
  product      Product  @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum DiscountType {
  AMOUNT
  PERCENT
}

model Order {
  id             String        @id @default(uuid())
  cashShiftId    String
  companyId      String?
  customerId     String?
  customer       Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  company        Company?      @relation(fields: [companyId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  discountAmount Decimal
  discountType   DiscountType?
  discountValue  Decimal?
  netTotal       Decimal
  total          Decimal
  status         String
  cashShift      CashShift     @relation(fields: [cashShiftId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  payments       Payment[]
  documents      Document[]
  documentType   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  orderItems     OrderItem[]
}

enum DocumentType {
  INVOICE
  RECEIPT
  TICKET
}

model Document {
  id             String       @id @default(uuid())
  orderId        String
  customerId     String?
  companyId      String?
  discountAmount Decimal      @default(0)
  netTotal       Decimal
  total          Decimal
  documentType   DocumentType
  series         String
  number         Int
  dateOfIssue    DateTime
  qr             String?
  hash           String?
  order          Order        @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  company        Company?     @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customer       Customer?    @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum CustomerDocumentType {
  RUC
  DNI
}

model Customer {
  id             String                @id @default(uuid())
  companyId      String
  company        Company               @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documentType   CustomerDocumentType?
  documentNumber String?
  legalName      String?
  address        String?
  email          String?
  phoneNumber    String?
  geoCode        String?
  documents      Document[]
  orders         Order[]
}

model Company {
  id                 String          @id @default(uuid())
  name               String
  email              String
  phone              String
  address            String
  ruc                String?
  customers          Customer[]
  users              User[]
  products           Product[]
  cashShifts         CashShift[]
  orders             Order[]
  categories         Category[]
  logos              Logo[]
  stockTransfers     StockTransfer[]
  documents          Document[]
  subdomain          String?         @unique
  billingCredentials Json?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Logo {
  id        String   @id @default(uuid())
  url       String
  name      String
  key       String
  type      String
  size      Int
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model User {
  id             String          @id @default(uuid())
  companyId      String?
  company        Company?        @relation(fields: [companyId], references: [id])
  email          String          @unique
  password       String
  name           String?
  cashShifts     CashShift[]
  stockTransfers StockTransfer[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  WALLET
}

model Payment {
  id          String        @id @default(uuid())
  cashShiftId String
  amount      Decimal
  orderId     String
  data        Json?
  method      PaymentMethod
  cashShift   CashShift     @relation(fields: [cashShiftId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  order       Order         @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum LocalityLevel {
  COUNTRY
  DEPARTMENT
  PROVINCE
  DISTRICT
}

model Locality {
  id          String        @id @default(uuid())
  idUbigeo    String        @unique
  name        String
  code        String
  tag         String
  searchValue String
  level       LocalityLevel
  parentId    String?
  children    Locality[]    @relation("LocalityParent")
  parent      Locality?     @relation("LocalityParent", fields: [parentId], references: [idUbigeo])

  @@index([name, code, tag, parentId])
}
